#include "cache.h"

#define HISTORY_SIZE 10000
#define EXP_STEP 2
#define INIT_EXP 1000

bool hit_history[HISTORY_SIZE];
int hpointer, hitcount = HISTORY_SIZE / 2;
int expectation = INIT_EXP;

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
	for (int i = 0; i < HISTORY_SIZE / 2; i++) {
		hit_history[i] = true;
	}
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
	uint32_t way;

	// fill invalid line first
	for (way = 0; way < NUM_WAY; way++) {
		if (!block[set][way].valid) {
			return way;
		}
	}

	if (hitcount < expectation) {
		// decrease expectation
		expectation = (hitcount + expectation) / 2;

		// find lru block
		for (way = 1; way < NUM_WAY; way++) {
			if (block[set][way].lru == NUM_WAY - 2) {
				return way;
			}
		}
	}
	else {
		expectation += EXP_STEP;
	}

	return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
	hitcount -= hit_history[hpointer];
	hit_history[hpointer] = hit;
	hitcount += hit;
	hpointer = (hpointer + 1) % HISTORY_SIZE;

	// update lru
	for (int w = 1; w < NUM_WAY; w++) {
		if (block[set][w].valid && block[set][w].lru < block[set][way].lru) {
			block[set][w].lru++;
		}
	}
	block[set][way].lru = 0;
}

void CACHE::llc_replacement_final_stats()
{

}
