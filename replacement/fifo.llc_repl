#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{

}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way;

    // fill invalid line first
    for (way = 0; way < NUM_WAY; way++) {
	if (!block[set][way].valid) {
	    return way;
	}
    }

    // The oldest block is stored in `block[set][0].lru`.
    return block[set][0].lru;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    block[set][0].lru++;
    block[set][0].lru %= NUM_WAY;
}

void CACHE::llc_replacement_final_stats()
{

}
